from bge import logic
from random import randint

def roll_hitDice(n):
	result = 0
	for i in range(n):
		result += randint(1,8)
	return result

def find_xp_for_level(L):
	M = 50
	N = 100		#this is the XP curve for Zodiac FFRPG!
	if L == 1:
		return 0
	else:
		return find_xp_for_level(L-1) + M + (N*(L-2))
		

class Fighter:
	def __init__(self, hitDice, damage=(1,8), armor=2):
		self.hitDice = hitDice
		HP = roll_hitDice(hitDice)
		self.maxHP = HP
		self.HP = HP
		self.damage = damage
		self.damage_bonus = 0
		self.armor  = armor
		
		
		self.xp_value = 3
		
		#All this needs to be getted from __init__
		self.turn_rate = 0.08
		self.move_speed = 0.3
		self.attack_range = 3.0
		self.attack_rate = 60
		self.attack_counter = self.attack_rate
		
		self.target = None

	def __repr__(self):
		return "FIGHTER component of {}".format(self.owner)
	
	
	#Lost Life points from an origin		
	def hurt(self, damage, origin=None):
		if origin == None:
			origin = self.owner
		self.HP -= max(0, randint(1,self.armor))
		
		if self.HP <= 0:
			print("R.I.P.   {} has died at the hands of {}".format(self.owner.Name, origin.Name))
			self.owner.kill(origin)
			if origin.own == self.owner.sys['sys'].player:
				print("You gained {} XP".format(self.xp_value))
				self.owner.sys['sys'].player['ent'].fighter.gain_xp(self.xp_value)

		elif self.HP >= self.maxHP:	self.HP = self.maxHP
		print("{}/{} HP remaining for {}".format(self.HP, self.maxHP, self.owner.Name))
			
			
	def heal(self, amt):
		self.HP += amt
		if self.HP >= self.maxHP:	
			self.HP = self.maxHP

		
	#Attempt a melee attack
	def attack(self):
		d = self.attack_range
		ray = self.owner.ai.sight_ray(d)

		if ray and 'ent' in ray:
			if hasattr(ray['ent'], 'fighter') and ray['ent'].fighter:
				#################################
				#	Combat mechanics go here!	#
				#################################
				damage = randint(self.damage[0],self.damage[1])+self.damage_bonus
				ray['ent'].get_hit(damage, self.owner)	#Deal damage to the target
			
				#impact blood spray
				brush = self.owner.own.scene.objects['System']
				brush.worldPosition = ray.worldPosition
				brush.worldPosition.z += 1.0
				emitter = self.owner.own.scene.addObject('Blood Spray', brush, 2)
				emitter['impact'] = damage
		
		#Attacked, but no target..
		else:
			print("{} swings at the air!".format(self.owner.Name))
			
			
			
			
			
			
			

class PlayerFighter:
	def __init__(self, level, xp, strength, agility, vitality, magic,
					HP):
		self.level = level
		self.xp = xp
		
		self.strength = strength
		self.agility = agility
		self.vitality = vitality
		self.magic = magic
		
		self.maxHP = HP
		self.HP = HP
		
		self.armor = 4
		
		#All this needs to be getted from __init__
		self.turn_rate = 0.08
		self.move_speed = 0.3
		self.attack_range = 3.0
		self.attack_rate = 60
		self.attack_counter = self.attack_rate
		
		self.target = None
		
		logic.sendMessage('update_player_xp', '0.0')
		
	@property
	def damage(self):
		return randint(1,8)+(self.strength//3)
		
	@property
	def xp_to_next(self):
		return find_xp_for_level(self.level + 1)
	
	def __repr__(self):
		return "PLAYER-FIGHTER component of {}".format(self.owner)
	
	
	#Lost Life points from an origin		
	def hurt(self, damage, origin=None):
		if origin == None:
			origin = self.owner
		self.HP -= max(0, damage-randint(1, self.armor))
		
		if self.HP <= 0:
			#self.owner.state = 'dead'
			print("R.I.P.   {} has died at the hands of {}".format(self.owner.Name, origin.Name))
			self.owner.player_kill(origin)
			
		elif self.HP >= self.maxHP:	self.HP = self.maxHP

		self.announce_life()
		print("{}/{} HP remaining for {}".format(self.HP, self.maxHP, self.owner.Name))
			
	def heal(self, amt):
		self.HP += amt
		if self.HP >= self.maxHP:	
			self.HP = self.maxHP
		
		self.announce_life()
	
	#Player gains XP points, maybe levels up
	def gain_xp(self, amt):
		self.xp += amt
		if self.xp >= self.xp_to_next:
			self.level += 1
			logic.sendMessage('player_level_number', str(self.level))
			print("\nWelcome to Lvl {}!\n".format(self.level))
		
		#%progress to next lvl
		last_lvl = find_xp_for_level(self.level)
		A = self.xp - last_lvl
		B = find_xp_for_level(self.level+1) - last_lvl
		value = A / B
		
		logic.sendMessage('update_player_xp', str(value))
		
	#send our Life info to the HUD for display	
	def announce_life(self):
		value = self.HP / self.maxHP
		logic.sendMessage('update_player_hp', str(value))
		logic.sendMessage('hp_number', str(self.HP))
		
	#Attempt a melee attack
	def attack(self):
		d = self.attack_range
		ray = self.owner.ai.sight_ray(d)

		if ray and 'ent' in ray:
			if hasattr(ray['ent'], 'fighter') and ray['ent'].fighter:
				#################################
				#	Combat mechanics go here!	#
				#################################
				ray['ent'].get_hit(self.damage, self.owner)	#Deal damage to the target
			
				#impact blood spray
				brush = self.owner.own.scene.objects['System']
				brush.worldPosition = ray.worldPosition
				brush.worldPosition.z += 1.0
				emitter = self.owner.own.scene.addObject('Blood Spray', brush, 2)
				emitter['impact'] = self.power
		
		#Attacked, but no target..
		else:
			print("{} swings at the air!".format(self.owner.Name))
			
			

